<templateSet group="Flutter">
  <template name="scfAppBar" value="return Scaffold(&#10;appBar: SimpleAppBar(&#10;        leadingIcon: Icons.arrow_back_ios,&#10;        //sizeLeadingIcon: 40,&#10;        title: '$appbarTitle$',&#10;        bgcolor: Theme.of(context).primaryColor,&#10;        // bottom: true,&#10;        onLeadingPressed: () {&#10;          Navigator.pop(context);&#10;        },&#10;        actions: [IconsNotify()],&#10;      ),&#10;body: $body$&#10;);" description="New Scaffold with AppBar" toReformat="true" toShortenFQNames="true">
    <variable name="appbarTitle" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="body" expression="&quot;bodyWidget&quot;" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="scfIndex" value="Scaffold(&#10;      key: _scaffoldKey,&#10;      appBar: SimpleAppBar(&#10;        leadingIcon: Icons.arrow_back_ios,&#10;        //sizeLeadingIcon: 40,&#10;        title: '$title$',&#10;        bgcolor: Theme.of(context).primaryColor,&#10;        // bottom: true,&#10;        onLeadingPressed: () {&#10;          Navigator.pop(context);&#10;        },&#10;        actions: [IconsNotify()],&#10;      ),&#10;      body: Container(&#10;        color: Colors.grey[200],&#10;        width: MediaQuery.of(context).size.width,&#10;        height: MediaQuery.of(context).size.height,&#10;        // padding: EdgeInsets.all(20),&#10;        child: Consumer&lt;$controller$&gt;(&#10;          builder: (context, _, child) {&#10;            if (_.$list$.isEmpty) {&#10;              return Center(&#10;                child: Container(&#10;                  padding: const EdgeInsets.all(50),&#10;                  child: RichText(&#10;                    text: TextSpan(&#10;                      text: 'Aguarde enquando seus $waitText$ sÃ£o carregados',&#10;                      style: DefaultTextStyle.of(context).style,&#10;                      children: [&#10;                        WidgetSpan(&#10;                          child: CircleAvatar(&#10;                            maxRadius: 10,&#10;                            child: Icon(&#10;                              Icons.add,&#10;                              color: Theme.of(context).backgroundColor,&#10;                              size: 12,&#10;                            ),&#10;                          ),&#10;                        ),&#10;                        const TextSpan(&#10;                          text: '.',&#10;                        )&#10;                      ],&#10;                    ),&#10;                  ),&#10;                ),&#10;              );&#10;            }&#10;            return ListView.separated(&#10;              separatorBuilder: (context, index) =&gt; const SizedBox(&#10;                height: 4,&#10;              ),&#10;              itemCount: _.$list$.length,&#10;              itemBuilder: (BuildContext context, int index) {&#10;                var i = _.$list$[index];&#10;                return Padding(&#10;                  padding: const EdgeInsets.only(left: 8.0, right: 8.0),&#10;                  child: GestureDetector(&#10;                    onTap: () async {&#10;                        // Navigator.pushNamed(context, '$rota$', arguments: args);&#10;                    &#10;                    },&#10;                    child: Container(&#10;                      padding: const EdgeInsets.only(right: 0),&#10;                      decoration: BoxDecoration(&#10;                        borderRadius: BorderRadius.circular(5),&#10;                        color: Colors.grey[200],&#10;                      ),&#10;                      child: item(i),&#10;                    ),&#10;                  ),&#10;                );&#10;              },&#10;            );&#10;          },&#10;        ),&#10;      ),&#10;      floatingActionButton: FloatingActionButton(&#10;        backgroundColor: Theme.of(context).primaryColor,&#10;        onPressed: () async {&#10;          await Navigator.pushNamed(context, '/$rotainsert$').then((value) {&#10;            setState(() {});&#10;          });&#10;        },&#10;        child: Icon(Icons.add, color: Theme.of(context).backgroundColor),&#10;      ),&#10;    );" description="create scaffold for basic index list using consumer and listview" toReformat="true" toShortenFQNames="true">
    <variable name="title" expression="&quot;titulo&quot; " defaultValue="" alwaysStopAt="true" />
    <variable name="controller" expression="&quot;controller&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="list" expression="&quot;listvariable&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="waitText" expression="&quot;waittextplural&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="rota" expression="&quot;route&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="rotainsert" expression="&quot;routefab&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
</templateSet>